#!/usr/bin/env python3
"""
Outlook Integration Setup Script
Guides user through Azure App Registration and environment configuration
"""
import os
import sys

def print_header(title):
    print(f"\n{'='*50}")
    print(f"  {title}")
    print(f"{'='*50}")

def print_step(step, description):
    print(f"\n[STEP {step}] {description}")
    print("-" * 40)

def main():
    print_header("OUTLOOK INTEGRATION SETUP")
    
    print("""
This script will guide you through setting up Microsoft Outlook integration
for your Chief of Staff application.

You'll need to:
1. Register an application in Azure Portal
2. Configure permissions for Microsoft Graph API
3. Set up environment variables
""")
    
    input("Press Enter to continue...")
    
    print_step(1, "Azure App Registration")
    print("""
1. Go to: https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationsListBlade
2. Click "New registration"
3. Fill out the form:
   - Name: "Chief of Staff Email Integration"
   - Supported account types: "Accounts in any organizational directory and personal Microsoft accounts"
   - Redirect URI: 
     * Platform: Web
     * URL: http://localhost:8787/auth/callback
4. Click "Register"
""")
    
    input("✓ Complete step 1, then press Enter...")
    
    print_step(2, "Get Application Credentials")
    print("""
After registration, you'll see the app overview page:
1. Copy the "Application (client) ID" - you'll need this
2. Copy the "Directory (tenant) ID" - you'll need this too
3. Go to "Certificates & secrets" in the left menu
4. Click "New client secret"
5. Add description: "Chief of Staff Integration"
6. Set expiration: "24 months" (recommended)
7. Click "Add"
8. IMMEDIATELY copy the secret value (you can't see it again!)
""")
    
    client_id = input("Enter your Application (client) ID: ").strip()
    tenant_id = input("Enter your Directory (tenant) ID (or press Enter for 'common'): ").strip() or "common"
    client_secret = input("Enter your Client Secret: ").strip()
    
    print_step(3, "Configure API Permissions")
    print("""
Still in the Azure Portal:
1. Go to "API permissions" in the left menu
2. Click "Add a permission"
3. Select "Microsoft Graph"
4. Choose "Delegated permissions"
5. Add these permissions:
   ✓ Mail.ReadWrite
   ✓ Mail.Send
   ✓ MailboxSettings.ReadWrite
   ✓ offline_access
6. Click "Add permissions"
7. IMPORTANT: Click "Grant admin consent" (if you're admin) or ask your admin to approve
""")
    
    input("✓ Complete step 3, then press Enter...")
    
    print_step(4, "Update Environment Variables")
    
    env_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')
    
    # Read existing .env if it exists
    env_vars = {}
    if os.path.exists(env_path):
        with open(env_path, 'r') as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value
    
    # Update with Outlook credentials
    env_vars.update({
        'MICROSOFT_CLIENT_ID': client_id,
        'MICROSOFT_CLIENT_SECRET': client_secret,
        'MICROSOFT_TENANT_ID': tenant_id,
        'MICROSOFT_REDIRECT_URI': 'http://localhost:8787/auth/callback'
    })
    
    # Write updated .env file
    with open(env_path, 'w') as f:
        f.write("# Chief of Staff Environment Variables\n")
        f.write("# Generated by setup_outlook.py\n\n")
        
        f.write("# Claude API\n")
        if 'ANTHROPIC_API_KEY' in env_vars:
            f.write(f"ANTHROPIC_API_KEY={env_vars['ANTHROPIC_API_KEY']}\n")
        else:
            f.write("ANTHROPIC_API_KEY=your-anthropic-key-here\n")
        
        f.write("\n# Microsoft Graph API (Outlook Integration)\n")
        f.write(f"MICROSOFT_CLIENT_ID={client_id}\n")
        f.write(f"MICROSOFT_CLIENT_SECRET={client_secret}\n")
        f.write(f"MICROSOFT_TENANT_ID={tenant_id}\n")
        f.write(f"MICROSOFT_REDIRECT_URI=http://localhost:8787/auth/callback\n")
        
        f.write("\n# Database\n")
        if 'DATABASE_URL' in env_vars:
            f.write(f"DATABASE_URL={env_vars['DATABASE_URL']}\n")
        else:
            f.write("DATABASE_URL=sqlite:///./cos_database.db\n")
    
    print(f"✓ Environment variables saved to: {env_path}")
    
    print_step(5, "Test the Integration")
    print("""
Now restart your Chief of Staff backend server and try:
1. /outlook status
2. Visit the authorization URL you get
3. Sign in and authorize the app
4. Try: /outlook setup
""")
    
    print_header("SETUP COMPLETE!")
    print("""
Your Outlook integration is now configured!

Next steps:
1. Restart the backend server
2. In the app, type: /outlook status
3. Follow the authorization link
4. Start using /outlook commands

If you have issues:
- Check that admin consent was granted for the API permissions
- Verify the redirect URI matches exactly: http://localhost:8787/auth/callback
- Ensure all environment variables are set correctly
""")

if __name__ == "__main__":
    main()